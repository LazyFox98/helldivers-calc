mixin projectiles(objects)
  tr.projectile-header
    th.projectile.idx(
      title=t('table.th.prj', 'idx', 'Internal order')
    ) #
    th.projectile.id(
      title=t('table.th.prj', 'id', 'ID of projectile data (hex)')
    ) ID
    th.projectile.name(
      title=t('table.th.prj', 'name', 'Translated name of projectile')
    ) Name
    th.projectile.damageid(
      title=t('table.th.prj', 'damageid', 'ID of damage data used (hex)')
    ) Dmg
    th.projectile.caliber(
      title=t('table.th.prj', 'caliber', 'Caliber (mm)')
    ) Cal
    th.projectile.pellets(
      title=t('table.th.prj', 'pellets', 'Pellet Count')
    )
    th.projectile.velocity(
      title=t('table.th.prj', 'velocity', 'Muzzle Velocity (m/s)')
    ) v
    th.projectile.mass(
      title=t('table.th.prj', 'mass', 'Mass (grams)')
    ) m
    th.projectile.drag(
      title=t('table.th.prj', 'drag', 'Drag Coefficient Multiplier')
    )
      span c
      sub d
    th.projectile.gravity(
      title=t('table.th.prj', 'gravity', 'Gravity Multiplier')
    ) g
    th.projectile.penslow(
      title=t('table.th.prj', 'penslow', 'Penetration Slowdown')
    ) PenSl
  each obj in objects
    tr.projectile-row
      td.projectile.idx= obj.idx
      td.projectile.id= id(obj)
      td.projectile.name= obj.name
      td.projectile.damageid= id(obj, 'damageid')
      td.projectile.caliber= obj.caliber
      td.projectile.pellets(class={ muted: obj.pellets < 2 })= obj.pellets
      td.projectile.velocity= obj.velocity
      td.projectile.mass= obj.mass
      td.projectile.drag= obj.drag
      td.projectile.gravity= obj.gravity
      td.projectile.penslow= obj.penslow

mixin explosions(objects)
  tr.explosion-header
    td.explosion.idx(
      title=t('table.th.aoe', 'idx', 'Internal order')
    ) #
    th.explosion.id(
      title=t('table.th.aoe', 'id', 'ID of explosion data (hex)')
    ) ID
    th.explosion.name(
      title=t('table.th.aoe', 'name', 'Translated name of AoE source')
    ) Name
    th.explosion.damageid(
      title=t('table.th.aoe', 'damageid', 'ID of damage data used (hex)')
    ) Dmg
    th.explosion.radius(
      title=t('table.th.aoe', 'radius', 'Radius Inner/Outer/Non-Damage (m)')
      colspan=3
    ) Radius
  each obj in objects
    tr.explosion-row
      td.explosion.idx= obj.idx
      td.explosion.id= id(obj)
      td.explosion.name= obj.name
      td.explosion.damageid= id(obj, 'damageid')
      td.explosion.r1= obj.r1
      td.explosion.r2= obj.r2
      td.explosion.r3= obj.r3

mixin damages(objects)
  tr.damage-header
    td.damage.idx(
      title=t('table.th.dmg', 'idx', 'Internal order')
    ) #
    th.explosion.id(
      title=t('table.th.dmg', 'id', 'ID of damage data (hex)')
    ) ID
    th.explosion.name(
      title=t('table.th.dmg', 'name', 'Translated name of damage source')
    ) Name
    th.explosion.dmg(
      title=t('table.th.dmg', 'dmgs3', 'Damage type / Base damage / Damage vs Massive')
      colspan=3
    ) Damage
    th.explosion.ap(
      title=t('table.th.dmg', 'ap', 'Armor Penetration, varies by context')
      colspan=4
    ) AP
    th.explosion.demo(
      title=t('table.th.dmg', 'demo', 'Demolition Force')
    ) DF
    th.explosion.stun(
      title=t('table.th.dmg', 'stun', 'Stagger Value')
    ) SV
    th.explosion.push(
      title=t('table.th.dmg', 'push', 'Push Force')
    ) PF
    th.explosion.effect(
      title=t('table.th.dmg', 'effects8', 'Status Effects')
      colspan=8
    ) Effects
  each obj in objects
    tr.explosion-row
      td.damage.idx= obj.idx
      td.damage.id= id(obj)
      td.damage.name= obj.name
      td.damage.dmgtype(class={muted: !obj.type })= obj.type
      td.damage.dmg= obj.dmg
      td.damage.massive= obj.mass
      each i in [1, 2, 3, 4]
        - var ap = obj[`ap${i}`]
        td.damage.ap(class=`ap-${ap} ap-list-${i}`)= ap
      td.damage.demo= obj.demo
      td.damage.stun= obj.stun
      td.damage.push= obj.push
      each i in [1, 2, 3, 4]
        - var func = obj[`func${i}`]
        - var param = obj[`param${i}`]
        td.damage.effect(class={muted: !func})= func
        td.damage.effect-param(class={muted: !func})= param

header.menu
  if nerdScope
    nav.links
      ul
        each scope in nerdScopes
          li
            a(onclick=`switchScope('${scope}')`)= scope
  .spacer
  select.select#lang-select(name="Lang" onchange="switchLang()")
    each l in langs
      option(value=l selected=(l === lang))= l
if nerdScope
  table
    if nerdScope === 'damages'
      +damages(sorted(damages))
    else if nerdScope === 'projectiles'
      +projectiles(sorted(projectiles))
    else if nerdScope === 'explosions'
      +explosions(sorted(explosions))
